#coding=utf-8
__author__ = 'egor'

"""
Script parameters:
    1: tag - file tag (all files related to quality check are named with the same tag)
    2: l - low bound for neutral cut
    3: r - upper bound for neutral cut
    4: pairs index - index of pairs file
"""

import sys

def read_to_dict(dict_to_add, filename):
    f = open(filename, 'r', encoding="utf-8")
    for s in f:
        if s.strip(' \n') not in dict_to_add:
            dict_to_add[s.strip(' \n')] = 0
    f.close()

def read_sums(sums_dict, filename):
    f = open(filename, 'r', encoding="utf-8")
    for s in f:
        s_split = s.strip(' \n').split(' ')
        if s_split[0] not in sums_dict:
            sums_dict[s_split[0]] = float(s_split[1])
    f.close()

def get_completeness(new_pos, new_neg, new_neu):
    comp_pos_file = "../../testing/500_pos.txt"
    comp_neg_file = "../../testing/500_neg.txt"
    comp_neu_file = "../../testing/500_neu.txt"
    
    comp_pos = {}
    comp_neg = {}
    comp_neu = {}
    read_to_dict(comp_pos, comp_pos_file)
    read_to_dict(comp_neg, comp_neg_file)
    read_to_dict(comp_neu, comp_neu_file)
    
    mistake_dict = {}

    # words, not found from comp dict
    not_found = []
    for w in comp_pos:
        if not (w in new_pos or w in new_neg or w in new_neu):
            not_found.append(w)
    for w in comp_neg:
        if not (w in new_pos or w in new_neg or w in new_neu):
            not_found.append(w)
    for w in comp_neu:
        if not (w in new_pos or w in new_neg or w in new_neu):
            not_found.append(w)
    
    # calculating completeness
    pos_true = 0 # number of guessed positive words
    neg_true = 0 # number of guessed positive words
    pos_false = 0 # number of mistakes (negative word recognized as positive)
    neg_false = 0 # number of mistakes (positive word recognized as negative)
    neu_false = 0 # neuatral, recognized not as neutral
    
    # iterating through words from generated by algorithms dictionary and counting guessed words.	
    for w in new_pos:
        if w in comp_pos:
            pos_true += 1
        elif w in comp_neg:
            mistake_dict[w] = 1
            neg_false += 1
        elif w in comp_neu:
            neu_false += 1

    for w in new_neg:
        if w in comp_neg:
            neg_true += 1
        elif w in comp_pos:
            mistake_dict[w] = -1
            pos_false += 1
        elif w in comp_neu:
            neu_false += 1
            
    compl = (pos_true + neg_true) * 100 / (len(comp_pos) + len(comp_neg))
    res = {"c":compl, "mistakes":mistake_dict, "pt":pos_true, 
    "pf":pos_false, "nt":neg_true, "nf":neg_false, "nef":neu_false,
    "notfound":not_found}
    
    return res

if __name__ == "__main__":
    
    if len(sys.argv) < 5:
        sys.exit("Bad arguments! Usage: [file tag] [low bound] [up bound] [pair index]")

    # reading parameters

    ftag = sys.argv[1]
    l = float(sys.argv[2])
    r = float(sys.argv[3])
    index = sys.argv[4]

    # files names to read drom
    new_pos_file = "../results/pos" + ftag + ".txt"
    new_neg_file = "../results/neg" + ftag + ".txt"
    new_neu_file = "../results/neu" + ftag + ".txt"

    sums_file = "../results/weights/sums" + ftag + ".txt"

    transformed_file = "../results/transformed" + index + ".txt"

    # initializing dictionaries
    new_pos = {}
    new_neg = {}
    new_neu = {}

    sums_dict = {} # distance to pos minus distance to neg for words

    # reading dictionaries
    read_to_dict(new_pos, new_pos_file)
    read_to_dict(new_neg, new_neg_file)

    # reading weights to pos and neg parts for every word from new dictionaries
    read_sums(sums_dict, sums_file)

    print ("New pos: " + str(len(new_pos)))
    print ("New neg: " + str(len(new_neg)))
    print ("New neu: " + str(len(new_neu)))

    # cutting neutral part
    for w in new_pos:
        if l <= sums_dict[w] <= r:
            new_neu[w] = 0
            
    for w in new_neg:
        if l <= sums_dict[w] <= r:
            new_neu[w] = 0
            
    for w in new_neu:
        if w in new_pos:
            del new_pos[w]
        elif w in new_neg:
            del new_neg[w]

    print ("After cut pos: " + str(len(new_pos)))
    print ("After cut neg: " + str(len(new_neg)))
    print ("After cut neu: " + str(len(new_neu)))

    cp = get_completeness(new_pos, new_neg, new_neu)
    
    print("Not found:")
    print(cp["notfound"])
    print("True positive = " + str(cp["pt"]))
    print("True negative = " + str(cp["nt"]))
    print("False positive = " + str(cp["pf"]))
    print("False negative = " + str(cp["nf"]))
    print("False neutral = " + str(cp["nef"]))
    print("Quality = " + str(cp["c"]) + " %")
    
    mistake_dict = cp["mistakes"]

    # outputting mistakes
    f = open("mistakes_compl" + ftag + ".txt", "w", encoding="utf-8")
    for w in mistake_dict:
        f.write(w + "\n")
    f.close()
