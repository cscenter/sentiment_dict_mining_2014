\documentclass[11pt]{article}
\usepackage{graphicx, subfig}
\usepackage[a3paper, margin=0.45in]{geometry}
\usepackage[russian]{babel}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{listings}
\usepackage{caption}
\usepackage{longtable}
\usepackage{lscape}

\pagenumbering{gobble}

\setlength{\parindent}{0pt}

<<setup, echo = FALSE, results='hide', message = FALSE>>=
  require(xtable)
  options(width=90)
  library("xtable")
@

\newcommand*\conj[1]{\bar{#1}}
\newcommand*\mean[1]{\bar{#1}}

\begin{document}
\begin{center}
{\bf \Large Resulting plots, f:7, coef:3\\}
\end{center}
<<echo=FALSE>>=

get_degree <- function(word, df) {
  return(nrow(df[ df$a1 == word| df$a2 == word, ]))
}

get_sum_pos_deg <- function(word, df) {
  return(nrow(df[ (df$a1 == word| df$a2 == word) & df$pos + df$neg > 0, ]))
}

get_sum_neg_deg <- function(word, df) {
  return(nrow(df[ (df$a1 == word| df$a2 == word) & df$pos + df$neg < 0, ]))
}

get_pos_val <- function(word, df) {
  return(sum(df[ df$a1 == word| df$a2 == word, "pos"]))
}

get_neg_val <- function(word, df) {
  return(-sum(df[ df$a1 == word| df$a2 == word, "neg"]))
}
@
Считываем данные:
<<>>=
spl = strsplit(getwd(), '/')
nwd = paste(spl[[1]][1:(length(spl[[1]]) - 2)], collapse = '/')
nwd = paste(nwd, "pairparser/results", sep = "/")
fname = "en_pairs(7).txt"
df = read.table(paste(nwd, fname, sep = "/"), skip = 1, stringsAsFactors=FALSE, encoding="UTF-8")
colnames(df) <- c("pos", "neg", "a1", "a2")
@
<<echo=FALSE>>=
#dictionaries
dict = unique(append(unique(df[['a1']]), unique(df[['a2']])))
dict_len = length(dict)
@
Всего слов (прилагательных): \Sexpr{dict_len} \\
<<>>=
ftag = '7_3new'

spl = strsplit(getwd(), '/')
nwd = paste(spl[[1]][1:(length(spl[[1]]) - 2)], collapse = '/')
nwd = paste(nwd, "results", sep = "/")

fname = paste(c("pos", ftag, ".txt"), collapse='')
pos_dict = scan(paste(nwd, fname, sep = "/"), what=character())
fname = paste(c("neg", ftag, ".txt"), collapse='')
neg_dict = scan(paste(nwd, fname, sep = "/"), what=character())

neg_coef = 3
ndf = df
ndf$neg = ndf$neg * neg_coef

comp_dict_neg = read.table('../../../testing/500_neg.txt', stringsAsFactors=FALSE, encoding="UTF-8")[, 'V1']
comp_dict_pos = read.table('../../../testing/500_pos.txt', stringsAsFactors=FALSE, encoding="UTF-8")[, 'V1']
@
Функция для подсчёта "веса" вершины:
<<>>=
get_sum <- function(word, df) {
  topos = df[((df$a1 == word & df$a2 %in% pos_dict) | 
                (df$a2 == word & df$a1 %in% pos_dict)), 
             ]
   print(topos)
  print(topos$pos + topos$neg)
  sumpos = sum(topos$pos + topos$neg)
  print(sumpos)
  toneg = df[((df$a1 == word & df$a2 %in% neg_dict) | 
                (df$a2 == word & df$a1 %in% neg_dict)), 
             ]
  print(toneg)
  sumneg = sum(toneg$pos + toneg$neg)
  print(sumneg)
  
  return(sumpos - sumneg)
}
@
Таким образом для каждой вершины считаем: $w_i = (s_+ - s_-)$, где $s_+$ - сумма весов на рёбрах ведущий в положительную долю, а $s_-$ - сумма весов на рёбрах ведущий в отрицательную долю, $deg(i)$ - степень вершины $i$\\
<<echo=FALSE, fig.height=15, fig.width=15>>=
# sums = double(length=dict_len)
# for (i in (1:dict_len)) {
#   if (i %% 50 == 0)
#     print(i)
#   sums[i] = get_sum(dict[i], ndf)
# }
# sums = matrix(c(dict, sums), ncol = 2)

#write.table(sums[, c(1, 2)], file =paste(c("weights/sums", ftag, ".txt"), collapse=''), sep = ' ',  col.names = FALSE, quote = FALSE, row.names = FALSE)

sums = read.table(paste(c("weights/sums", ftag, ".txt"), collapse=''), stringsAsFactors=FALSE, col.names = c('word', 's'))
sums = sums[order(sums[[2]], decreasing=TRUE), ]
plot(which(sums$w %in% pos_dict), sums[(sums$word %in% pos_dict == TRUE), 2], col = 'green', 
     xlab = 'words indexes', 
     ylab = 'sum to pos - sum to neg')
lines(which(sums$w %in% neg_dict), sums[(sums$word %in% neg_dict == TRUE), 2], col = 'red', type='p')
lines(which(sums$w %in% comp_dict_pos), sums[(sums$word %in% comp_dict_pos == TRUE), 2], col = 'blue', type='p', pch=25)
lines(which(sums$w %in% comp_dict_neg), sums[(sums$word %in% comp_dict_neg == TRUE), 2], col = 'pink', type='p', pch=22)


p1 = 0.05
p2 = 1 - 0.03
nsums = sums[(p1 * dict_len):(p2 * dict_len), ]
plot(which(nsums$w %in% pos_dict), nsums[(nsums$word %in% pos_dict == TRUE), 2], col = 'green', 
     xlab = 'words indexes', 
     ylab = 'sum to pos - sum to neg',
     main = '0.05 from top and 0.03 from bottom % cut')
lines(which(nsums$w %in% neg_dict), nsums[(nsums$word %in% neg_dict == TRUE), 2], col = 'red', type='p')
lines(which(nsums$w %in% comp_dict_pos), nsums[(nsums$word %in% comp_dict_pos == TRUE), 2], col = 'blue', type='p', pch=25)
lines(which(nsums$w %in% comp_dict_neg), nsums[(nsums$word %in% comp_dict_neg == TRUE), 2], col = 'pink', type='p', pch=22)

p1 = 0.09
p2 = 1 - 0.03
nsums = sums[(p1 * dict_len):(p2 * dict_len), ]
plot(which(nsums$w %in% pos_dict), nsums[(nsums$word %in% pos_dict == TRUE), 2], col = 'green', 
     xlab = 'words indexes', 
     ylab = 'sum to pos - sum to neg',
     main = '0.09 from top and 0.03 from bottom % cut')
lines(which(nsums$w %in% neg_dict), nsums[(nsums$word %in% neg_dict == TRUE), 2], col = 'red', type='p')
lines(which(nsums$w %in% comp_dict_pos), nsums[(nsums$word %in% comp_dict_pos == TRUE), 2], col = 'blue', type='p', pch=25)
lines(which(nsums$w %in% comp_dict_neg), nsums[(nsums$word %in% comp_dict_neg == TRUE), 2], col = 'pink', type='p', pch=22)

p1 = 0.15
p2 = 1 - 0.04
nsums = sums[(p1 * dict_len):(p2 * dict_len), ]
plot(which(nsums$w %in% pos_dict), nsums[(nsums$word %in% pos_dict == TRUE), 2], col = 'green', 
     xlab = 'words indexes', 
     ylab = 'sum to pos - sum to neg',
     main = '0.15 from top and 0.04 from bottom % cut')
lines(which(nsums$w %in% neg_dict), nsums[(nsums$word %in% neg_dict == TRUE), 2], col = 'red', type='p')
lines(which(nsums$w %in% comp_dict_pos), nsums[(nsums$word %in% comp_dict_pos == TRUE), 2], col = 'blue', type='p', pch=25)
lines(which(nsums$w %in% comp_dict_neg), nsums[(nsums$word %in% comp_dict_neg == TRUE), 2], col = 'pink', type='p', pch=22)
@

<<echo=FALSE>>=
fsums = sums
fsums$s = factor(fsums$s)
lvls = levels(fsums$s)
counts = matrix(rep(0, 3 * length(lvls)), ncol = 3)
counts[, 1] = as.numeric(lvls)

cwords = list(list(), length = length(lvls))
for (i in 1:length(lvls)) {
  buf = fsums[fsums$s == lvls[i], ]
  cpos <- buf[buf$word %in% pos_dict, 'word']
  cneg <- buf[buf$word %in% neg_dict, 'word']
  cur = list(lvl1 = lvls[i], pos = cpos,neg = cneg)
  cwords[[i]] = cur
  counts[i, 2] = nrow(buf[buf$word %in% pos_dict, ]) # pos
  counts[i, 3] = nrow(buf[buf$word %in% neg_dict, ]) # neg
}
@
\newpage
В таблице ниже приведены позитивные (pos) и негативные (neg) для некоторых уровней, т.е. имеющие вес $w_i = (s_+ - s_-)$ равный значению в первом столбце.\\
<<results='asis', echo=FALSE>>=

# making dataframe to print table
indexes = c(1:length(lvls))
tbl = matrix(rep(0, 3 * length(indexes)), ncol = 3)
for (i in 1:length(indexes)) {
  tbl[i, 1] = cwords[[indexes[i]]]$lvl
  tbl[i, 2] = paste(cwords[[indexes[i]]]$pos, collapse=", ")
  tbl[i, 3] = paste(cwords[[indexes[i]]]$neg, collapse=", ")
}

library(xtable)
ntdf <- as.data.frame(tbl)
colnames(ntdf) = c("level", "pos", "neg")
x.big <- xtable(ntdf)
align(x.big)<-"lp{1in}|p{4.7in}|p{4.7in}|" #here is the change
print(x.big, tabular.environment='longtable',floating=FALSE, table.placement="", hline.after =c(-1,0:nrow(x.big)), include.rownames=FALSE,
      size="\\tiny")
@

\end{document}